/**
 * Generated by orval v7.13.2 🍺
 * Do not edit manually.
 * Collect Map API
 * Django backend for Collect Map API - Mountain and Path data management
 * OpenAPI spec version: 1.0.0
 */

import { customFetch } from ".././custom-fetch";
import type {
  PaginatedPathList,
  Path,
  PathsBulkDeleteCreate200,
  PathsBulkDeleteCreate400,
  PathsBulkDeleteCreateParams,
  PathsListParams,
} from ".././models";

/**
 * 指定されたIDのPathの詳細情報を取得
 */
export type pathsListResponse200 = {
  data: PaginatedPathList;
  status: 200;
};

export type pathsListResponseSuccess = pathsListResponse200 & {
  headers: Headers;
};

export type pathsListResponse = pathsListResponseSuccess;

export const getPathsListUrl = (params?: PathsListParams) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `/paths/?${stringifiedParams}`
    : `/paths/`;
};

export const pathsList = async (
  params?: PathsListParams,
  options?: RequestInit,
): Promise<pathsListResponse> => {
  return customFetch<pathsListResponse>(getPathsListUrl(params), {
    ...options,
    method: "GET",
  });
};

/**
 * 指定されたIDのPathの詳細情報を取得（標高グラフデータ付き）
 */
export type pathsRetrieveResponse200 = {
  data: Path;
  status: 200;
};

export type pathsRetrieveResponseSuccess = pathsRetrieveResponse200 & {
  headers: Headers;
};

export type pathsRetrieveResponse = pathsRetrieveResponseSuccess;

export const getPathsRetrieveUrl = (id: number) => {
  return `/paths/${id}/`;
};

export const pathsRetrieve = async (
  id: number,
  options?: RequestInit,
): Promise<pathsRetrieveResponse> => {
  return customFetch<pathsRetrieveResponse>(getPathsRetrieveUrl(id), {
    ...options,
    method: "GET",
  });
};

/**
 * 指定された境界ボックス内の複数のPathを一括削除
 */
export type pathsBulkDeleteCreateResponse200 = {
  data: PathsBulkDeleteCreate200;
  status: 200;
};

export type pathsBulkDeleteCreateResponse400 = {
  data: PathsBulkDeleteCreate400;
  status: 400;
};

export type pathsBulkDeleteCreateResponseSuccess =
  pathsBulkDeleteCreateResponse200 & {
    headers: Headers;
  };
export type pathsBulkDeleteCreateResponseError =
  pathsBulkDeleteCreateResponse400 & {
    headers: Headers;
  };

export type pathsBulkDeleteCreateResponse =
  | pathsBulkDeleteCreateResponseSuccess
  | pathsBulkDeleteCreateResponseError;

export const getPathsBulkDeleteCreateUrl = (
  params: PathsBulkDeleteCreateParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `/paths/bulk-delete/?${stringifiedParams}`
    : `/paths/bulk-delete/`;
};

export const pathsBulkDeleteCreate = async (
  params: PathsBulkDeleteCreateParams,
  options?: RequestInit,
): Promise<pathsBulkDeleteCreateResponse> => {
  return customFetch<pathsBulkDeleteCreateResponse>(
    getPathsBulkDeleteCreateUrl(params),
    {
      ...options,
      method: "POST",
    },
  );
};
