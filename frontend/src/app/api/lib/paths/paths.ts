/**
 * Generated by orval v7.13.2 🍺
 * Do not edit manually.
 * Collect Map API
 * Django backend for Collect Map API - Mountain and Path data management
 * OpenAPI spec version: 1.0.0
 */

import { customFetch } from ".././custom-fetch";
import type { ListPaths200, ListPathsParams, Path } from ".././models";

/**
 * Path一覧を取得（bbox検索・フィルタリング・ページネーション対応）
 */
export type listPathsResponse200 = {
  data: ListPaths200;
  status: 200;
};

export type listPathsResponseSuccess = listPathsResponse200 & {
  headers: Headers;
};

export type listPathsResponse = listPathsResponseSuccess;

export const getListPathsUrl = (params?: ListPathsParams) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `/paths/?${stringifiedParams}`
    : `/paths/`;
};

export const listPaths = async (
  params?: ListPathsParams,
  options?: RequestInit,
): Promise<listPathsResponse> => {
  return customFetch<listPathsResponse>(getListPathsUrl(params), {
    ...options,
    method: "GET",
  });
};

/**
 * 指定されたIDのPathの詳細情報を取得
 */
export type retrievePathResponse200 = {
  data: Path;
  status: 200;
};

export type retrievePathResponseSuccess = retrievePathResponse200 & {
  headers: Headers;
};

export type retrievePathResponse = retrievePathResponseSuccess;

export const getRetrievePathUrl = (id: string) => {
  return `/paths/${id}/`;
};

export const retrievePath = async (
  id: string,
  options?: RequestInit,
): Promise<retrievePathResponse> => {
  return customFetch<retrievePathResponse>(getRetrievePathUrl(id), {
    ...options,
    method: "GET",
  });
};
