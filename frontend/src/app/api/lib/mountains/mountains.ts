/**
 * Generated by orval v7.13.2 🍺
 * Do not edit manually.
 * Collect Map API
 * OpenAPI spec version: 0.1.0
 */

import { customFetch } from ".././custom-fetch";
import type {
  HTTPValidationError,
  ListMountainsMountainsGetParams,
  ListPrefecturesMountainsPrefecturesGetParams,
  ListTypesMountainsTypesGetParams,
  Mountain,
  MountainCreate,
  MountainList,
  MountainUpdate,
  Prefecture,
  Type,
} from ".././models";

/**
 * 新規Mountainを作成
 * @summary Create Mountain
 */
export type createMountainMountainsPostResponse201 = {
  data: Mountain;
  status: 201;
};

export type createMountainMountainsPostResponse422 = {
  data: HTTPValidationError;
  status: 422;
};

export type createMountainMountainsPostResponseSuccess =
  createMountainMountainsPostResponse201 & {
    headers: Headers;
  };
export type createMountainMountainsPostResponseError =
  createMountainMountainsPostResponse422 & {
    headers: Headers;
  };

export type createMountainMountainsPostResponse =
  | createMountainMountainsPostResponseSuccess
  | createMountainMountainsPostResponseError;

export const getCreateMountainMountainsPostUrl = () => {
  return `/mountains/`;
};

export const createMountainMountainsPost = async (
  mountainCreate: MountainCreate,
  options?: RequestInit,
): Promise<createMountainMountainsPostResponse> => {
  return customFetch<createMountainMountainsPostResponse>(
    getCreateMountainMountainsPostUrl(),
    {
      ...options,
      method: "POST",
      headers: { "Content-Type": "application/json", ...options?.headers },
      body: JSON.stringify(mountainCreate),
    },
  );
};

/**
 * Mountain一覧を取得（フィルタリング・ページネーション対応）
 * @summary List Mountains
 */
export type listMountainsMountainsGetResponse200 = {
  data: MountainList;
  status: 200;
};

export type listMountainsMountainsGetResponse422 = {
  data: HTTPValidationError;
  status: 422;
};

export type listMountainsMountainsGetResponseSuccess =
  listMountainsMountainsGetResponse200 & {
    headers: Headers;
  };
export type listMountainsMountainsGetResponseError =
  listMountainsMountainsGetResponse422 & {
    headers: Headers;
  };

export type listMountainsMountainsGetResponse =
  | listMountainsMountainsGetResponseSuccess
  | listMountainsMountainsGetResponseError;

export const getListMountainsMountainsGetUrl = (
  params?: ListMountainsMountainsGetParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `/mountains/?${stringifiedParams}`
    : `/mountains/`;
};

export const listMountainsMountainsGet = async (
  params?: ListMountainsMountainsGetParams,
  options?: RequestInit,
): Promise<listMountainsMountainsGetResponse> => {
  return customFetch<listMountainsMountainsGetResponse>(
    getListMountainsMountainsGetUrl(params),
    {
      ...options,
      method: "GET",
    },
  );
};

/**
 * 指定されたIDのMountainを取得
 * @summary Get Mountain
 */
export type getMountainMountainsMountainIdGetResponse200 = {
  data: Mountain;
  status: 200;
};

export type getMountainMountainsMountainIdGetResponse422 = {
  data: HTTPValidationError;
  status: 422;
};

export type getMountainMountainsMountainIdGetResponseSuccess =
  getMountainMountainsMountainIdGetResponse200 & {
    headers: Headers;
  };
export type getMountainMountainsMountainIdGetResponseError =
  getMountainMountainsMountainIdGetResponse422 & {
    headers: Headers;
  };

export type getMountainMountainsMountainIdGetResponse =
  | getMountainMountainsMountainIdGetResponseSuccess
  | getMountainMountainsMountainIdGetResponseError;

export const getGetMountainMountainsMountainIdGetUrl = (mountainId: number) => {
  return `/mountains/${mountainId}`;
};

export const getMountainMountainsMountainIdGet = async (
  mountainId: number,
  options?: RequestInit,
): Promise<getMountainMountainsMountainIdGetResponse> => {
  return customFetch<getMountainMountainsMountainIdGetResponse>(
    getGetMountainMountainsMountainIdGetUrl(mountainId),
    {
      ...options,
      method: "GET",
    },
  );
};

/**
 * Mountain情報を更新（部分更新）
 * @summary Update Mountain
 */
export type updateMountainMountainsMountainIdPatchResponse200 = {
  data: Mountain;
  status: 200;
};

export type updateMountainMountainsMountainIdPatchResponse422 = {
  data: HTTPValidationError;
  status: 422;
};

export type updateMountainMountainsMountainIdPatchResponseSuccess =
  updateMountainMountainsMountainIdPatchResponse200 & {
    headers: Headers;
  };
export type updateMountainMountainsMountainIdPatchResponseError =
  updateMountainMountainsMountainIdPatchResponse422 & {
    headers: Headers;
  };

export type updateMountainMountainsMountainIdPatchResponse =
  | updateMountainMountainsMountainIdPatchResponseSuccess
  | updateMountainMountainsMountainIdPatchResponseError;

export const getUpdateMountainMountainsMountainIdPatchUrl = (
  mountainId: number,
) => {
  return `/mountains/${mountainId}`;
};

export const updateMountainMountainsMountainIdPatch = async (
  mountainId: number,
  mountainUpdate: MountainUpdate,
  options?: RequestInit,
): Promise<updateMountainMountainsMountainIdPatchResponse> => {
  return customFetch<updateMountainMountainsMountainIdPatchResponse>(
    getUpdateMountainMountainsMountainIdPatchUrl(mountainId),
    {
      ...options,
      method: "PATCH",
      headers: { "Content-Type": "application/json", ...options?.headers },
      body: JSON.stringify(mountainUpdate),
    },
  );
};

/**
 * Mountainを削除
 * @summary Delete Mountain
 */
export type deleteMountainMountainsMountainIdDeleteResponse204 = {
  data: undefined;
  status: 204;
};

export type deleteMountainMountainsMountainIdDeleteResponse422 = {
  data: HTTPValidationError;
  status: 422;
};

export type deleteMountainMountainsMountainIdDeleteResponseSuccess =
  deleteMountainMountainsMountainIdDeleteResponse204 & {
    headers: Headers;
  };
export type deleteMountainMountainsMountainIdDeleteResponseError =
  deleteMountainMountainsMountainIdDeleteResponse422 & {
    headers: Headers;
  };

export type deleteMountainMountainsMountainIdDeleteResponse =
  | deleteMountainMountainsMountainIdDeleteResponseSuccess
  | deleteMountainMountainsMountainIdDeleteResponseError;

export const getDeleteMountainMountainsMountainIdDeleteUrl = (
  mountainId: number,
) => {
  return `/mountains/${mountainId}`;
};

export const deleteMountainMountainsMountainIdDelete = async (
  mountainId: number,
  options?: RequestInit,
): Promise<deleteMountainMountainsMountainIdDeleteResponse> => {
  return customFetch<deleteMountainMountainsMountainIdDeleteResponse>(
    getDeleteMountainMountainsMountainIdDeleteUrl(mountainId),
    {
      ...options,
      method: "DELETE",
    },
  );
};

/**
 * Type一覧を取得
 * @summary List Types
 */
export type listTypesMountainsTypesGetResponse200 = {
  data: Type[];
  status: 200;
};

export type listTypesMountainsTypesGetResponse422 = {
  data: HTTPValidationError;
  status: 422;
};

export type listTypesMountainsTypesGetResponseSuccess =
  listTypesMountainsTypesGetResponse200 & {
    headers: Headers;
  };
export type listTypesMountainsTypesGetResponseError =
  listTypesMountainsTypesGetResponse422 & {
    headers: Headers;
  };

export type listTypesMountainsTypesGetResponse =
  | listTypesMountainsTypesGetResponseSuccess
  | listTypesMountainsTypesGetResponseError;

export const getListTypesMountainsTypesGetUrl = (
  params?: ListTypesMountainsTypesGetParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `/mountains/types/?${stringifiedParams}`
    : `/mountains/types/`;
};

export const listTypesMountainsTypesGet = async (
  params?: ListTypesMountainsTypesGetParams,
  options?: RequestInit,
): Promise<listTypesMountainsTypesGetResponse> => {
  return customFetch<listTypesMountainsTypesGetResponse>(
    getListTypesMountainsTypesGetUrl(params),
    {
      ...options,
      method: "GET",
    },
  );
};

/**
 * Prefecture一覧を取得
 * @summary List Prefectures
 */
export type listPrefecturesMountainsPrefecturesGetResponse200 = {
  data: Prefecture[];
  status: 200;
};

export type listPrefecturesMountainsPrefecturesGetResponse422 = {
  data: HTTPValidationError;
  status: 422;
};

export type listPrefecturesMountainsPrefecturesGetResponseSuccess =
  listPrefecturesMountainsPrefecturesGetResponse200 & {
    headers: Headers;
  };
export type listPrefecturesMountainsPrefecturesGetResponseError =
  listPrefecturesMountainsPrefecturesGetResponse422 & {
    headers: Headers;
  };

export type listPrefecturesMountainsPrefecturesGetResponse =
  | listPrefecturesMountainsPrefecturesGetResponseSuccess
  | listPrefecturesMountainsPrefecturesGetResponseError;

export const getListPrefecturesMountainsPrefecturesGetUrl = (
  params?: ListPrefecturesMountainsPrefecturesGetParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `/mountains/prefectures/?${stringifiedParams}`
    : `/mountains/prefectures/`;
};

export const listPrefecturesMountainsPrefecturesGet = async (
  params?: ListPrefecturesMountainsPrefecturesGetParams,
  options?: RequestInit,
): Promise<listPrefecturesMountainsPrefecturesGetResponse> => {
  return customFetch<listPrefecturesMountainsPrefecturesGetResponse>(
    getListPrefecturesMountainsPrefecturesGetUrl(params),
    {
      ...options,
      method: "GET",
    },
  );
};
