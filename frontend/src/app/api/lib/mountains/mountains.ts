/**
 * Generated by orval v7.13.2 🍺
 * Do not edit manually.
 * Collect Map API
 * Django backend for Collect Map API - Mountain and Path data management
 * OpenAPI spec version: 1.0.0
 */

import { customFetch } from ".././custom-fetch";
import type {
  ListMountains200,
  ListMountainsParams,
  Mountain,
  MountainCreate,
  MountainUpdate,
} from ".././models";

/**
 * Type一覧を取得
 */
export type listlistTypesResponse200 = {
  data: unknown[];
  status: 200;
};

export type listlistTypesResponseSuccess = listlistTypesResponse200 & {
  headers: Headers;
};

export type listlistTypesResponse = listlistTypesResponseSuccess;

export const getListlistTypesUrl = () => {
  return `/http://localhost:8000/mountains/types/`;
};

export const listlistTypes = async (
  options?: RequestInit,
): Promise<listlistTypesResponse> => {
  return customFetch<listlistTypesResponse>(getListlistTypesUrl(), {
    ...options,
    method: "GET",
  });
};

/**
 * Prefecture一覧を取得
 */
export type listlistPrefecturesResponse200 = {
  data: unknown[];
  status: 200;
};

export type listlistPrefecturesResponseSuccess =
  listlistPrefecturesResponse200 & {
    headers: Headers;
  };

export type listlistPrefecturesResponse = listlistPrefecturesResponseSuccess;

export const getListlistPrefecturesUrl = () => {
  return `/http://localhost:8000/mountains/prefectures/`;
};

export const listlistPrefectures = async (
  options?: RequestInit,
): Promise<listlistPrefecturesResponse> => {
  return customFetch<listlistPrefecturesResponse>(getListlistPrefecturesUrl(), {
    ...options,
    method: "GET",
  });
};

/**
 * Mountain一覧を取得（フィルタリング・ページネーション対応）
 */
export type listMountainsResponse200 = {
  data: ListMountains200;
  status: 200;
};

export type listMountainsResponseSuccess = listMountainsResponse200 & {
  headers: Headers;
};

export type listMountainsResponse = listMountainsResponseSuccess;

export const getListMountainsUrl = (params?: ListMountainsParams) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `/http://localhost:8000/mountains/?${stringifiedParams}`
    : `/http://localhost:8000/mountains/`;
};

export const listMountains = async (
  params?: ListMountainsParams,
  options?: RequestInit,
): Promise<listMountainsResponse> => {
  return customFetch<listMountainsResponse>(getListMountainsUrl(params), {
    ...options,
    method: "GET",
  });
};

/**
 * 新規Mountainを作成
 */
export type createMountainResponse201 = {
  data: MountainCreate;
  status: 201;
};

export type createMountainResponseSuccess = createMountainResponse201 & {
  headers: Headers;
};

export type createMountainResponse = createMountainResponseSuccess;

export const getCreateMountainUrl = () => {
  return `/http://localhost:8000/mountains/`;
};

export const createMountain = async (
  mountainCreate: MountainCreate,
  options?: RequestInit,
): Promise<createMountainResponse> => {
  return customFetch<createMountainResponse>(getCreateMountainUrl(), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(mountainCreate),
  });
};

/**
 * Mountain API ViewSet
 */
export type retrieveMountainResponse200 = {
  data: Mountain;
  status: 200;
};

export type retrieveMountainResponseSuccess = retrieveMountainResponse200 & {
  headers: Headers;
};

export type retrieveMountainResponse = retrieveMountainResponseSuccess;

export const getRetrieveMountainUrl = (id: string) => {
  return `/http://localhost:8000/mountains/${id}/`;
};

export const retrieveMountain = async (
  id: string,
  options?: RequestInit,
): Promise<retrieveMountainResponse> => {
  return customFetch<retrieveMountainResponse>(getRetrieveMountainUrl(id), {
    ...options,
    method: "GET",
  });
};

/**
 * Mountain情報を更新
 */
export type updateMountainResponse200 = {
  data: MountainUpdate;
  status: 200;
};

export type updateMountainResponseSuccess = updateMountainResponse200 & {
  headers: Headers;
};

export type updateMountainResponse = updateMountainResponseSuccess;

export const getUpdateMountainUrl = (id: string) => {
  return `/http://localhost:8000/mountains/${id}/`;
};

export const updateMountain = async (
  id: string,
  mountainUpdate: MountainUpdate,
  options?: RequestInit,
): Promise<updateMountainResponse> => {
  return customFetch<updateMountainResponse>(getUpdateMountainUrl(id), {
    ...options,
    method: "PUT",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(mountainUpdate),
  });
};

/**
 * Mountain API ViewSet
 */
export type partialUpdateMountainResponse200 = {
  data: MountainUpdate;
  status: 200;
};

export type partialUpdateMountainResponseSuccess =
  partialUpdateMountainResponse200 & {
    headers: Headers;
  };

export type partialUpdateMountainResponse =
  partialUpdateMountainResponseSuccess;

export const getPartialUpdateMountainUrl = (id: string) => {
  return `/http://localhost:8000/mountains/${id}/`;
};

export const partialUpdateMountain = async (
  id: string,
  mountainUpdate: MountainUpdate,
  options?: RequestInit,
): Promise<partialUpdateMountainResponse> => {
  return customFetch<partialUpdateMountainResponse>(
    getPartialUpdateMountainUrl(id),
    {
      ...options,
      method: "PATCH",
      headers: { "Content-Type": "application/json", ...options?.headers },
      body: JSON.stringify(mountainUpdate),
    },
  );
};

/**
 * Mountainを削除
 */
export type destroyMountainResponse204 = {
  data: void;
  status: 204;
};

export type destroyMountainResponseSuccess = destroyMountainResponse204 & {
  headers: Headers;
};

export type destroyMountainResponse = destroyMountainResponseSuccess;

export const getDestroyMountainUrl = (id: string) => {
  return `/http://localhost:8000/mountains/${id}/`;
};

export const destroyMountain = async (
  id: string,
  options?: RequestInit,
): Promise<destroyMountainResponse> => {
  return customFetch<destroyMountainResponse>(getDestroyMountainUrl(id), {
    ...options,
    method: "DELETE",
  });
};
