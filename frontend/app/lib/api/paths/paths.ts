/**
 * Generated by orval v7.13.2 🍺
 * Do not edit manually.
 * Collect Map API
 * OpenAPI spec version: 0.1.0
 */
import type {
  HTTPValidationError,
  ListPathsPathsGetParams,
  Path,
  PathList
} from '.././models';

import { customFetch } from '.././custom-fetch';

/**
 * 指定されたIDのPathを取得
 * @summary Get Path
 */
export type getPathPathsPathIdGetResponse200 = {
  data: Path
  status: 200
}

export type getPathPathsPathIdGetResponse422 = {
  data: HTTPValidationError
  status: 422
}
    
export type getPathPathsPathIdGetResponseSuccess = (getPathPathsPathIdGetResponse200) & {
  headers: Headers;
};
export type getPathPathsPathIdGetResponseError = (getPathPathsPathIdGetResponse422) & {
  headers: Headers;
};

export type getPathPathsPathIdGetResponse = (getPathPathsPathIdGetResponseSuccess | getPathPathsPathIdGetResponseError)

export const getGetPathPathsPathIdGetUrl = (pathId: number,) => {


  

  return `/paths/${pathId}`
}

export const getPathPathsPathIdGet = async (pathId: number, options?: RequestInit): Promise<getPathPathsPathIdGetResponse> => {
  
  return customFetch<getPathPathsPathIdGetResponse>(getGetPathPathsPathIdGetUrl(pathId),
  {      
    ...options,
    method: 'GET'
    
    
  }
);}


/**
 * Path一覧を取得（フィルタリング・ページネーション対応）

Args:
    skip: スキップする件数
    limit: 取得する最大件数
    highway: highwayタグでフィルタ（例: "path", "track"）
    minlat: 検索範囲の最小緯度
    minlon: 検索範囲の最小経度
    maxlat: 検索範囲の最大緯度
    maxlon: 検索範囲の最大経度
 * @summary List Paths
 */
export type listPathsPathsGetResponse200 = {
  data: PathList
  status: 200
}

export type listPathsPathsGetResponse422 = {
  data: HTTPValidationError
  status: 422
}
    
export type listPathsPathsGetResponseSuccess = (listPathsPathsGetResponse200) & {
  headers: Headers;
};
export type listPathsPathsGetResponseError = (listPathsPathsGetResponse422) & {
  headers: Headers;
};

export type listPathsPathsGetResponse = (listPathsPathsGetResponseSuccess | listPathsPathsGetResponseError)

export const getListPathsPathsGetUrl = (params?: ListPathsPathsGetParams,) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0 ? `/paths/?${stringifiedParams}` : `/paths/`
}

export const listPathsPathsGet = async (params?: ListPathsPathsGetParams, options?: RequestInit): Promise<listPathsPathsGetResponse> => {
  
  return customFetch<listPathsPathsGetResponse>(getListPathsPathsGetUrl(params),
  {      
    ...options,
    method: 'GET'
    
    
  }
);}


